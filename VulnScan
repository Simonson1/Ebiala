1. scanner.py – The main vulnerability scanner script:
python
Copy
import requests

def check_sql_injection(url):
    """
    Function to check if a website is vulnerable to SQL Injection
    :param url: Target URL
    """
    sqli_payload = "' OR 1=1 --"
    test_url = f"{url}/login?username={sqli_payload}&password=test"
    response = requests.get(test_url)

    if "error" not in response.text.lower():
        print(f"Potential SQL Injection vulnerability found at {url}")
    else:
        print(f"No SQL Injection vulnerability found at {url}")

def check_xss(url):
    """
    Function to check if a website is vulnerable to Cross-Site Scripting (XSS)
    :param url: Target URL
    """
    xss_payload = "<script>alert('XSS')</script>"
    test_url = f"{url}/search?q={xss_payload}"
    response = requests.get(test_url)

    if xss_payload in response.text:
        print(f"Potential XSS vulnerability found at {url}")
    else:
        print(f"No XSS vulnerability found at {url}")

def check_open_redirect(url):
    """
    Function to check if a website is vulnerable to Open Redirect
    :param url: Target URL
    """
    redirect_payload = "http://evil.com"
    test_url = f"{url}/redirect?url={redirect_payload}"
    response = requests.get(test_url)

    if "http://evil.com" in response.url:
        print(f"Potential Open Redirect vulnerability found at {url}")
    else:
        print(f"No Open Redirect vulnerability found at {url}")

if __name__ == "__main__":
    target_url = input("Enter the target URL: ")
    print("\nScanning for SQL Injection...")
    check_sql_injection(target_url)
    print("\nScanning for XSS...")
    check_xss(target_url)
    print("\nScanning for Open Redirect...")
    check_open_redirect(target_url)
2. requirements.txt – Dependencies for the project:
nginx
Copy
requests
3. README.md – Project documentation:
markdown
Copy
# Vulnerability Scanner Tool

## Overview
This is a simple Python-based vulnerability scanner designed to detect common web vulnerabilities, including:
- SQL Injection
- Cross-Site Scripting (XSS)
- Open Redirects

The tool can be used to scan a target website and check for the presence of these vulnerabilities. It's a useful learning tool for anyone interested in web application security.

## Features
- **SQL Injection Detection**: Checks if the website is vulnerable to SQL injection by attempting to inject common SQL payloads.
- **XSS Detection**: Tries to inject common XSS payloads into input fields to see if they are reflected in the page.
- **Open Redirect Detection**: Tests if the site allows attackers to redirect users to external sites.

## Requirements
To run this project, you need Python 3.x and the following dependencies:
- `requests`: for sending HTTP requests.

You can install the required dependencies with pip:
```bash
pip install -r requirements.txt
Usage
Clone this repository to your local machine:
bash
Copy
git clone https://github.com/yourusername/vuln-scanner.git
Navigate into the project directory:
bash
Copy
cd vuln-scanner
Run the scanner:
bash
Copy
python scanner.py
Enter the target website URL when prompted.
Example Output:
rust
Copy
Enter the target URL: https://example.com

Scanning for SQL Injection...
Potential SQL Injection vulnerability found at https://example.com

Scanning for XSS...
No XSS vulnerability found at https://example.com

Scanning for Open Redirect...
Potential Open Redirect vulnerability found at https://example.com
License
This project is open source and available under the MIT License.

yaml
Copy

---

### **4. Folder Structure**:

```plaintext
vuln-scanner/
├── scanner.py            # Main script for scanning vulnerabilities
├── requirements.txt      # Dependencies for the project
└── README.md             # Project documentation
Instructions:
Create the folder and add files:

Create a folder called vuln-scanner.
Inside this folder, create the scanner.py, requirements.txt, and README.md files. Paste the respective code into each file.
Install Dependencies:

Create a virtual environment (optional but recommended):
bash
Copy
python3 -m venv env
Install the required libraries using:
bash
Copy
pip install -r requirements.txt
Run the Scanner:

To scan a website, run the script using:
bash
Copy
python scanner.py
Enter the URL of the website you want to scan when prompted.
Example of Running the Script:
bash
Copy
Enter the target URL: http://example.com

Scanning for SQL Injection...
No SQL Injection vulnerability found at http://example.com

Scanning for XSS...
No XSS vulnerability found at http://example.com

Scanning for Open Redirect...
Potential Open Redirect vulnerability found at http://example.com
Uploading to GitHub:
Initialize a Git repository in your project folder:

bash
Copy
git init
Add the files to the repository:

bash
Copy
git add .
Commit your changes:

bash
Copy
git commit -m "Initial commit: Vulnerability Scanner"
Create a repository on GitHub and follow the instructions to link your local repo to the remote one:

bash
Copy
git remote add origin https://github.com/yourusername/vuln-scanner.git
git push -u origin master
